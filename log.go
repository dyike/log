package loggoer

import (
	"io"
	"sync"
	"time"
    "runtime"
    "fmt"
    "os"
)

// These flags define which text to prefix to each log entry generated by the Logger.
const (
	// Bits or'ed together to control what's printed.
	// There is no control over the order they appear (the order listed
	// here) or the format they present (as described in the comments).
	// The prefix is followed by a colon only when Llongfile or Lshortfile
	// is specified.
	// For example, flags Ldate | Ltime (or LstdFlags) produce,
	//produce2009/01/23 01:23:23 message
	// while flags Ldate | Ltime | Lmicroseconds | Llongfile produce,
	//produce2009/01/23 01:23:23.123123 /a/b/c/d.go:23: message
	Ldate         = 1 << iota     // the date in the local time zone: 2009/01/23
	Ltime                         // the time in the local time zone: 01:23:23
	Lmicroseconds                 // microsecond resolution: 01:23:23.123123.  assumes Ltime.
	Llongfile                     // full file name and line number: /a/b/c/d.go:23
	Lshortfile                    // final file name element and line number: d.go:23. overrides Llongfile
	LUTC                          // if Ldate or Ltime is set, use UTC rather than the local time zone
	LstdFlags     = Ldate | Ltime // initial values for the standard logger
)

// log levels
const (
	DEBUG int = iota
	INFO
	WARN
	ERROR
	FATAL
)

// log level strings
var (
	levelStrings = [...]string{"[DEBUG]", "[INFO]", "[WARN]", "[ERROR]", "[FATAL]"}
)

// Loggoer loggoer struct.
type Loggoer struct {
	level int        // log level
	mu    sync.Mutex // ensure atomic writes;protects the following fields
	flag  int        // properties
	out   io.Writer  // destination for output
	buf   []byte     // for accumulating text to write
}

// Set set the writer, log level and flags.
func Set(level int, out io.Writer, flag int) {
	if out == nil || level < DEBUG || level > FATAL {
		panic("error logger arguments")
	}
	std = Loggoer{out: out, level: level, flag: flag}
}


// SetOutput set output destination for the standard logger.
func SetOutput(w io.Writer) {
    if w == nil {
        panic("output can not be null")
    }
    std.mu.Lock()
    defer std.mu.Unlock()
    std.out = w
}

// SetLevel set log level for the standard logger.
func SetLevel(level int) {
    if level < DEBUG || level > FATAL {
        panic("wrong log level")
    }
    std.mu.Lock()
    defer std.mu.Unlock()
    std.level = level
}

// SetFlag set flag for the standard logger
func SetFlag(flag int) {
    std.flag = flag
}

// Cheap integer to fixed-width decimal ASCII.  Give a negative width to avoid zero-padding.
func itoa(buf *[]byte, i int, wid int) {
	// Assemble decimal in reverse order.
	var b [20]byte
	bp := len(b) - 1
	for i >= 10 || wid > 1 {
		wid--
		q := i / 10
		b[bp] = byte('0' + i - q*10)
		bp--
		i = q
	}
	// i < 10
	b[bp] = byte('0' + i)
	*buf = append(*buf, b[bp:]...)
}

func (l *Logger) formatHeader(buf *[]byte, t time.Time, level string, file string, line int) {
	if l.flag&LUTC != 0 {
		t = t.UTC()
	}

	if l.flag&(Ldate|Ltime|Lmicroseconds) != 0 {
		if l.flag&Ldate != 0 {
			year, month, day := t.Date()
			itoa(buf, year, 4)
			*buf = append(*buf, '/')
			itoa(buf, int(month), 2)
			*buf = append(*buf, '/')
			itoa(buf, day, 2)
			*buf = append(*buf, ' ')
		}

		if l.flag&(Ltime|Lmicroseconds) != 0 {
			hour, min, sec := t.Clock()
			itoa(buf, hour, 2)
			*buf = append(*buf, ':')
			itoa(buf, min, 2)
			*buf = append(*buf, ':')
			itoa(buf, sec, 2)
			if l.flag&Lmicroseconds != 0 {
				*buf = append(*buf, '.')
				itoa(buf, t.Nanosecond()/1e3, 6)
			}
			*buf = append(*buf, ' ')
		}
	}
    
    *buf = append(*buf, level...)
    *buf = append(*buf, ' ')

    if l.flag&(Lshortfile|Llongfile)!=0 {
        if l.flag&Lshortfile != 0 {
            short := file
            for i := len(file) - 1;i>0; i-- {
                if file[i] == '/' {
                    short = file[i+1:]
                    break
		}
            }
        }
        *buf = append(*buf, file...)
        *buf = append(*buf, ':')
        itoa(buf, line, -1)
        *buf = append(*buf, ": "...) 
    }

}


func (l *Loggoer) Output(lv int, s string) error {
    now := time.Now()
    var file string 
    var line int 
    l.mu.Lock()
    defer l.mu.Unlock()
    if l.flag&(Lshortfile|Llongfile) != 0 {
        // release lock while getting caller info - it's expensive.
        l.mu.Unlock()
        var ok bool 
        _, file, line, ok = runtime.Caller(2)
        if !ok {
            file = "???"
            line = 0 
        }
        l.mu.Lock()
    }

    l.buf = l.buf[:0]
    l.formatHeader(&l.buf, now, levelStrings[lv], file, line)
    l.buf = append(l.buf, s...)
    if len(s) == 0 || s[len(s) -1] != '\n' {
        l.buf = append(l.buf, '\n')
    }
    _, err := l.out.Write(l.buf)
    return err 
}


func Debug(format string, a ...interface{}) {
    if DEBUG < std.level {
        return 
    }
    std.Output(DEBUG, fmt.Sprintf(format, a...))
}


func Info(format string, a ...interface{}) {
    if INFO < std.level {
        return
    }
    std.Output(INFO, fmt.Sprintf(format, a...))
}



func Warn(format string, a ...interface{}) {
    if WARN < std.level {
        return
    }
    std.Output(WARN, fmt.Sprintf(format, a...))
}



func Error(format string, a ...interface{}) {
    if ERROR < std.level {
        return
    }
    std.Output(ERROR, fmt.Sprintf(format, a...))
}


func Fatal(format string, a ...interface{}) {
    if FATAL < std.level {
        return
    }
    std.Output(FATAL, fmt.Sprintf(format, a...))
}
